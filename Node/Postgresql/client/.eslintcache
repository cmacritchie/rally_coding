[{"C:\\Users\\craig.macritchie\\Desktop\\Rally_Coding_Redux\\Node\\Postgresql\\client\\src\\index.js":"1","C:\\Users\\craig.macritchie\\Desktop\\Rally_Coding_Redux\\Node\\Postgresql\\client\\src\\App.js":"2","C:\\Users\\craig.macritchie\\Desktop\\Rally_Coding_Redux\\Node\\Postgresql\\client\\src\\reducers\\index.js":"3","C:\\Users\\craig.macritchie\\Desktop\\Rally_Coding_Redux\\Node\\Postgresql\\client\\src\\reducers\\userReducer.js":"4","C:\\Users\\craig.macritchie\\Desktop\\Rally_Coding_Redux\\Node\\Postgresql\\client\\src\\actions\\userActions.js":"5","C:\\Users\\craig.macritchie\\Desktop\\Rally_Coding_Redux\\Node\\Postgresql\\client\\src\\reducers\\blogReducer.js":"6","C:\\Users\\craig.macritchie\\Desktop\\Rally_Coding_Redux\\Node\\Postgresql\\client\\src\\actions\\blogActions.js":"7","C:\\Users\\craig.macritchie\\Desktop\\Rally_Coding_Redux\\Node\\Postgresql\\client\\src\\pages\\NewArticle.js":"8","C:\\Users\\craig.macritchie\\Desktop\\Rally_Coding_Redux\\Node\\Postgresql\\client\\src\\pages\\Login.js":"9","C:\\Users\\craig.macritchie\\Desktop\\Rally_Coding_Redux\\Node\\Postgresql\\client\\src\\components\\NavBar.js":"10","C:\\Users\\craig.macritchie\\Desktop\\Rally_Coding_Redux\\Node\\Postgresql\\client\\src\\pages\\Home.js":"11","C:\\Users\\craig.macritchie\\Desktop\\Rally_Coding_Redux\\Node\\Postgresql\\client\\src\\components\\Credentials.js":"12","C:\\Users\\craig.macritchie\\Desktop\\Rally_Coding_Redux\\Node\\Postgresql\\client\\src\\pages\\Signup.js":"13"},{"size":672,"mtime":1611241824851,"results":"14","hashOfConfig":"15"},{"size":912,"mtime":1611465803460,"results":"16","hashOfConfig":"15"},{"size":206,"mtime":1611209193710,"results":"17","hashOfConfig":"15"},{"size":702,"mtime":1611209193711,"results":"18","hashOfConfig":"15"},{"size":1590,"mtime":1611469015189,"results":"19","hashOfConfig":"15"},{"size":489,"mtime":1611209193709,"results":"20","hashOfConfig":"15"},{"size":1254,"mtime":1611433341441,"results":"21","hashOfConfig":"15"},{"size":2209,"mtime":1611434932837,"results":"22","hashOfConfig":"15"},{"size":619,"mtime":1611438497059,"results":"23","hashOfConfig":"15"},{"size":1056,"mtime":1611469725535,"results":"24","hashOfConfig":"15"},{"size":1346,"mtime":1611246054431,"results":"25","hashOfConfig":"15"},{"size":1308,"mtime":1611434261638,"results":"26","hashOfConfig":"15"},{"size":674,"mtime":1611434374932,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"g0kvsn",{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"30"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"30"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"30"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"30"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"30"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"30"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"30"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"30"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"62"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"30"},"C:\\Users\\craig.macritchie\\Desktop\\Rally_Coding_Redux\\Node\\Postgresql\\client\\src\\index.js",[],["66","67"],"C:\\Users\\craig.macritchie\\Desktop\\Rally_Coding_Redux\\Node\\Postgresql\\client\\src\\App.js",["68"],"import React, { useEffect } from 'react'\r\nimport { HashRouter,  Route } from 'react-router-dom';\r\nimport Cookie from 'js-cookie'\r\nimport { useDispatch } from \"react-redux\";\r\nimport NavBar from './components/NavBar'\r\n\r\nimport Home from './pages/Home'\r\nimport Login from './pages/Login'\r\nimport Signup from './pages/Signup'\r\nimport NewArticle from './pages/NewArticle'\r\n\r\nimport { getMe } from './actions/userActions'\r\n\r\n\r\n\r\nfunction App() {\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(getMe())\r\n  })\r\n\r\n  return (\r\n    <HashRouter>\r\n      <NavBar />\r\n      <Route exact path=\"/\" component={Home} />\r\n      <Route path=\"/login\" component={Login} />\r\n      <Route path=\"/sign-up\" component={Signup} />\r\n      <Route path=\"/post-article\" component={NewArticle} />\r\n      <Route path=\"/post-article/:articleid\" component={NewArticle} />\r\n    </HashRouter>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\craig.macritchie\\Desktop\\Rally_Coding_Redux\\Node\\Postgresql\\client\\src\\reducers\\index.js",[],"C:\\Users\\craig.macritchie\\Desktop\\Rally_Coding_Redux\\Node\\Postgresql\\client\\src\\reducers\\userReducer.js",["69"],"import { UserActionTypes } from '../actions/userActions'\r\n\r\n\r\nconst initialState = {\r\n    loginError: false,\r\n    isAuthenticated: false,\r\n    userInfo:null\r\n}\r\n\r\nexport default function(state = initialState, action) {\r\n    const { type, payload} = action;\r\n    switch(type) {\r\n        case UserActionTypes.LOGIN_SUCCESS:\r\n        case UserActionTypes.REGISETER_USER:\r\n            return { ...state, loginError: false, isAuthenticated: true, userInfo: { ...payload }}\r\n        case UserActionTypes.LOGIN_FAIL:\r\n            return { ...state, loginError: true }\r\n        case UserActionTypes.LOGOUT:\r\n            return { ...state, ...initialState }\r\n        default:\r\n            return state\r\n    }\r\n}","C:\\Users\\craig.macritchie\\Desktop\\Rally_Coding_Redux\\Node\\Postgresql\\client\\src\\actions\\userActions.js",["70"],"import axios from 'axios'\r\n// import { history }\r\n\r\nexport const UserActionTypes = { \r\n    LOGIN_SUCCESS: 'LOGIN_SUCCESS',\r\n    LOGIN_FAIL: 'LOGIN_FAIL',\r\n    REGISETER_USER: 'REGISTER_USER',\r\n    LOGOUT: 'LOGOUT',\r\n}\r\n\r\nexport const getMe = () => async dispatch => {\r\n\r\n    try{\r\n        const res = await axios.get('/api/me',);\r\n        console.log(\"good\", res)\r\n        dispatch({\r\n            type: UserActionTypes.LOGIN_SUCCESS,\r\n            payload: res.data\r\n        })\r\n    \r\n    } catch (e) {\r\n        console.log('bad', e)\r\n    }\r\n}\r\n\r\nexport const registerUser = (newUser) => async dispatch => {\r\n    console.log(\"inside action \",newUser)\r\n    try{\r\n        const res = await axios.post('/api/user', newUser);\r\n        console.log(res);\r\n        dispatch({\r\n            type: UserActionTypes.REGISETER_USER,\r\n            payload: res.data\r\n        })\r\n    } catch (e) {\r\n        console.log(e)\r\n    }\r\n}\r\n\r\nexport const loginUser = (credentials) => async dispatch => {\r\n    try{\r\n        const res = await axios.post('/api/login', credentials)\r\n        console.log('credentials, ', res)\r\n        dispatch({\r\n            type: UserActionTypes.LOGIN_SUCCESS,\r\n            payload: res.data\r\n        })\r\n    } catch (e) {\r\n        console.log(e)\r\n        dispatch({\r\n            type: UserActionTypes.LOGIN_FAIL,\r\n        })\r\n    }\r\n}\r\n\r\nexport const logout = () => async dispatch => {\r\n    console.log('logout');\r\n    try {\r\n        const res = await axios.post('/api/logout')\r\n        dispatch({ type: UserActionTypes.LOGOUT })\r\n    } catch (e) {\r\n        console.log(e)\r\n    }\r\n}","C:\\Users\\craig.macritchie\\Desktop\\Rally_Coding_Redux\\Node\\Postgresql\\client\\src\\reducers\\blogReducer.js",["71"],"import { BlogActionTypes } from '../actions/blogActions'\r\n\r\n\r\nconst initialState = {\r\n    articles: []\r\n}\r\n\r\nexport default function(state = initialState, action) {\r\n    const { type, payload} = action;\r\n    switch(type) {\r\n        case BlogActionTypes.FETCH_ARTICLES:\r\n            return { ...state, articles: payload }\r\n        case BlogActionTypes.POST_ARTICLE:\r\n            return {...state, articles: [payload, ...state.articles]}\r\n        default:\r\n            return state\r\n    }\r\n}","C:\\Users\\craig.macritchie\\Desktop\\Rally_Coding_Redux\\Node\\Postgresql\\client\\src\\actions\\blogActions.js",["72"],"import axios from 'axios'\r\n// import { history }\r\n\r\nexport const BlogActionTypes = {\r\n    FETCH_ARTICLES: 'FETCH_ARTICLES',\r\n    POST_ARTICLE: 'POST_ARTICLE',\r\n    DELETE_ARTICLE: 'DELETE_ARTICLE',\r\n    EDIT_ARTICLE: 'EDIT_ARTICLE',\r\n}\r\n\r\nexport const getArticles = () => async dispatch => {\r\n    const res = await axios.get('/api/blogpost')\r\n    console.log(res)\r\n    dispatch({\r\n        type: BlogActionTypes.FETCH_ARTICLES,\r\n        payload: res.data.blogposts\r\n    }) \r\n}\r\n\r\nexport const postArticle = (article) => async dispatch => {\r\n    const res = await axios.post('/api/blogpost', article)\r\n    dispatch({\r\n        type: BlogActionTypes.POST_ARTICLE,\r\n        payload: res.data\r\n    })\r\n}\r\n\r\nexport const deleteArticle = (articleId) => async dispatch => {\r\n    const res = await axios.delete(`/api/blogpost/${articleId}`)\r\n    dispatch({\r\n        type: BlogActionTypes.DELETE_ARTICLE,\r\n        payload: articleId\r\n    })\r\n}\r\n\r\nexport const editArticle = (editArticle) => async dispatch => {\r\n    const res = await axios.patch(`/api/blogpost/${editArticle.id}`)\r\n    dispatch({\r\n        type: BlogActionTypes.EDIT_ARTICLE,\r\n        payload: res.data\r\n    })\r\n}\r\n\r\nexport const registerUser =() => {\r\n    console.log(\"this is a fucking joke\")\r\n}\r\n","C:\\Users\\craig.macritchie\\Desktop\\Rally_Coding_Redux\\Node\\Postgresql\\client\\src\\pages\\NewArticle.js",["73"],"import React, { useEffect, useState} from 'react'\r\nimport axios from 'axios';\r\nimport { bindActionCreators } from 'redux'\r\nimport { connect } from 'react-redux'\r\nimport { postArticle, editArticle } from '../actions/blogActions'\r\n\r\nconst mapDispatchToProps = dispatch => bindActionCreators(\r\n    { postArticle },\r\n    dispatch,\r\n)\r\n\r\nconst ArticleForm = ({existingArticle, onSubmit}) => {\r\n    const [article, setArticle] = useState(existingArticle)\r\n\r\n    return(\r\n        <form id=\"article-form\" onSubmit={() => onSubmit(article)}>\r\n            <label htmlFor=\"article-title\">Title</label><br />\r\n            <input id=\"article-title\" value={article.title} onChange={e=>setArticle({...article, title: e.target.value })}></input><br />\r\n            <label htmlFor=\"article-content\">Content</label><br/>\r\n            <textarea id=\"article-content\" value={article.content} onChange={e=>setArticle({...article, content:e.target.value})} /><br />\r\n            <button type=\"submit\" form=\"article-form\" value=\"Submit\">Submit</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nArticleForm.defaultProps = {\r\n    existingArticle: {\r\n        title:'',\r\n        content:''\r\n    }\r\n}\r\n\r\nconst ArticleWrapper = ({ match, history, postArticle, editArticle }) => {\r\n\r\n    const [fetchedArticle, setFetchedArticle] = useState({ title:'', content:''})\r\n    \r\n    useEffect(() => {\r\n        const { params } = match\r\n\r\n        async function fetchArticle(articleId) {\r\n            const res = await axios.get(`/api/blogposts/${articleId}`)\r\n            setFetchedArticle(res.data);\r\n        }\r\n        if(Object.keys(params).includes('articleid')){\r\n            fetchArticle(params.articleid)\r\n        }\r\n    })\r\n\r\n    const submitHandler = (article) => {\r\n        if(article.hasOwnProperty('id')) {\r\n            console.log(\"patch article \")\r\n            //need to fix this.\r\n            editArticle(article)\r\n        }\r\n        else {\r\n            console.log(\"creat Article\")\r\n            postArticle(article)\r\n        }\r\n        // history.push('/')\r\n    }\r\n\r\n    return(\r\n        <ArticleForm existingArticle={fetchedArticle} onSubmit={submitHandler} />\r\n    )\r\n}\r\n\r\n\r\nexport default connect(null, mapDispatchToProps)(ArticleWrapper)","C:\\Users\\craig.macritchie\\Desktop\\Rally_Coding_Redux\\Node\\Postgresql\\client\\src\\pages\\Login.js",["74","75"],"import React, { useEffect, useState} from 'react'\r\nimport { bindActionCreators } from 'redux'\r\nimport { connect } from 'react-redux'\r\nimport Credentials from '../components/Credentials'\r\nimport { loginUser } from '../actions/userActions'\r\n\r\nconst mapDispatchToProps = dispatch => bindActionCreators(\r\n    { loginUser },\r\n    dispatch,\r\n)\r\n\r\nconst Login = ({ loginUser }) => {\r\n\r\n    const submit = (info) => {\r\n        loginUser(info)\r\n    }\r\n\r\n    return(\r\n        <>\r\n        <h1>Login</h1>\r\n        <Credentials onSubmit={submit} />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(Login)\r\n","C:\\Users\\craig.macritchie\\Desktop\\Rally_Coding_Redux\\Node\\Postgresql\\client\\src\\components\\NavBar.js",[],"C:\\Users\\craig.macritchie\\Desktop\\Rally_Coding_Redux\\Node\\Postgresql\\client\\src\\pages\\Home.js",["76"],"import React, { useEffect } from 'react'\r\nimport { bindActionCreators } from 'redux'\r\nimport { connect } from 'react-redux';\r\nimport { getArticles } from '../actions/blogActions'\r\n\r\nconst mapDispatchToProps = dispatch => bindActionCreators({ \r\n    getArticles\r\n  },  dispatch)\r\n\r\nconst mapStateToProps = ({ blog }) => {\r\n    return {\r\n        blog\r\n    }\r\n}\r\n\r\nconst Home = ({ getArticles, blog }) => {\r\n\r\n    useEffect(() => {\r\n        getArticles()\r\n    },[])\r\n\r\n    if(blog.articles.length === 0) {\r\n        return <h1> No Blog posts. Yet</h1>\r\n    }\r\n    \r\n    if(blog.articles.length > 0) {\r\n        return (\r\n        <div className=\"blog-posts\">\r\n                {blog.articles.map(article => {\r\n                    return (\r\n                        <div className=\"article\">\r\n                            <h3 className=\"article-title\">{article.title}</h3>\r\n                            <span> created: {article.createdAt}</span>\r\n                            <br />\r\n                            <span>author: test</span>\r\n                            <p className=\"article-content\">{article.content}</p>\r\n                        </div>\r\n                    )\r\n                })\r\n                }\r\n        </div>\r\n        )\r\n    }\r\n\r\n    return <h1>What's going on?</h1>\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Home)","C:\\Users\\craig.macritchie\\Desktop\\Rally_Coding_Redux\\Node\\Postgresql\\client\\src\\components\\Credentials.js",["77"],"import React, { useEffect, useState} from 'react'\r\n\r\nconst Credentials = ({ onSubmit, email = false}) => {\r\n    const [credentials, setCredentials] = useState({email:'', password:'', name:''})\r\n\r\n    const submitForm = e => {\r\n        e.preventDefault()\r\n        onSubmit(credentials);\r\n    }\r\n\r\n    return(\r\n        <form className=\"credentials\" id=\"credentials-form\" onSubmit={e => submitForm(e)}>\r\n            <label htmlFor=\"login-username\">User Name</label>\r\n            <input  name=\"username\" id=\"login-username\" value={credentials.name} onChange={e=>setCredentials({...credentials, name: e.target.value })}></input><br />\r\n            {email &&\r\n            <>\r\n                <label htmlFor=\"login-email\">email</label>\r\n                <input  name=\"email\" id=\"login-email\" value={credentials.email} onChange={e=>setCredentials({...credentials, email: e.target.value })}></input><br />\r\n            </>\r\n            }\r\n            <label htmlFor=\"login-password\">password</label>\r\n            <input type=\"password\" id=\"login-password\" value={credentials.password} onChange={e=>setCredentials({...credentials, password:e.target.value})}></input><br />\r\n            <button type=\"submit\" form=\"credentials-form\" value=\"Submit\">Submit</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default Credentials",["78","79"],"C:\\Users\\craig.macritchie\\Desktop\\Rally_Coding_Redux\\Node\\Postgresql\\client\\src\\pages\\Signup.js",["80","81"],"import React, { useEffect, useState} from 'react'\r\nimport { bindActionCreators } from 'redux'\r\nimport { connect } from 'react-redux'\r\nimport Credentials from '../components/Credentials'\r\nimport { registerUser } from '../actions/userActions'\r\n\r\nconst mapDispatchToProps = dispatch => bindActionCreators(\r\n    { registerUser },\r\n    dispatch,\r\n)\r\n\r\nconst Signup = ({ registerUser }) => {\r\n\r\n    const submit = (info) => {\r\n        console.log(info)\r\n        registerUser(info)\r\n    }\r\n\r\n    return(\r\n        <>\r\n        <h1> Sign Up</h1>\r\n        <Credentials onSubmit={submit} email={true} />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(Signup)",{"ruleId":"82","replacedBy":"83"},{"ruleId":"84","replacedBy":"85"},{"ruleId":"86","severity":1,"message":"87","line":3,"column":8,"nodeType":"88","messageId":"89","endLine":3,"endColumn":14},{"ruleId":"90","severity":1,"message":"91","line":10,"column":1,"nodeType":"92","endLine":23,"endColumn":2},{"ruleId":"86","severity":1,"message":"93","line":58,"column":15,"nodeType":"88","messageId":"89","endLine":58,"endColumn":18},{"ruleId":"90","severity":1,"message":"91","line":8,"column":1,"nodeType":"92","endLine":18,"endColumn":2},{"ruleId":"86","severity":1,"message":"93","line":29,"column":11,"nodeType":"88","messageId":"89","endLine":29,"endColumn":14},{"ruleId":"86","severity":1,"message":"94","line":5,"column":23,"nodeType":"88","messageId":"89","endLine":5,"endColumn":34},{"ruleId":"86","severity":1,"message":"95","line":1,"column":17,"nodeType":"88","messageId":"89","endLine":1,"endColumn":26},{"ruleId":"86","severity":1,"message":"96","line":1,"column":28,"nodeType":"88","messageId":"89","endLine":1,"endColumn":36},{"ruleId":"97","severity":1,"message":"98","line":20,"column":7,"nodeType":"99","endLine":20,"endColumn":9,"suggestions":"100"},{"ruleId":"86","severity":1,"message":"95","line":1,"column":17,"nodeType":"88","messageId":"89","endLine":1,"endColumn":26},{"ruleId":"82","replacedBy":"101"},{"ruleId":"84","replacedBy":"102"},{"ruleId":"86","severity":1,"message":"95","line":1,"column":17,"nodeType":"88","messageId":"89","endLine":1,"endColumn":26},{"ruleId":"86","severity":1,"message":"96","line":1,"column":28,"nodeType":"88","messageId":"89","endLine":1,"endColumn":36},"no-native-reassign",["103"],"no-negated-in-lhs",["104"],"no-unused-vars","'Cookie' is defined but never used.","Identifier","unusedVar","import/no-anonymous-default-export","Unexpected default export of anonymous function","ExportDefaultDeclaration","'res' is assigned a value but never used.","'editArticle' is defined but never used.","'useEffect' is defined but never used.","'useState' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getArticles'. Either include it or remove the dependency array. If 'getArticles' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["105"],["103"],["104"],"no-global-assign","no-unsafe-negation",{"desc":"106","fix":"107"},"Update the dependencies array to be: [getArticles]",{"range":"108","text":"109"},[458,460],"[getArticles]"]